<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入配置文件 -->
    <properties resource="zeus.properties"/>

    <!-- 指定数据连接驱动jar地址,pom文件引入依赖则不用配置 -->
    <!--<classPathEntry location="${classPath}"/>-->

    <!-- 一个数据库一个context -->
    <!--defaultModelType可选值:-->
        <!--conditional:*这是默认值*,这个模型和下面的hierarchical类似，除了如果那个单独的类将只包含一个字段，将不会生成一个单独的类。因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,会将该字段合并到基本实体类中。-->
        <!--flat:该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。**这种模型最简单，推荐使用。**-->
        <!--hierarchical:如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类。MBG会在所有生成的实体类之间维护一个继承关系。-->
    <!--targetRuntime:此属性用于指定生成的代码的运行时环境。该属性支持以下可选值：-->
        <!--MyBatis3:*这是默认值*-->
        <!--MyBatis3Simple:不生成和Example查询有关的内容，可以避免在后面的<table>中逐个进行配置-->
        <!--Ibatis2Java2-->
        <!--Ibatis2Java5-->
    <context id="my" defaultModelType="flat" targetRuntime="MyBatis3">


        <!-- 注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/><!-- 是否取消注释 -->
            <property name="suppressDate" value="true"/><!-- 是否生成注释代时间戳-->
        </commentGenerator>

        <!-- 数据库配置 -->
        <jdbcConnection
                driverClass="${driverName}"
                connectionURL="${url}"
                userId="${username}"
                password="${password}">
        </jdbcConnection>

        <!-- 类型转换 -->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成model -->
        <javaModelGenerator targetPackage="${modelTarget}" targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/><!-- 是否在包名最后加上数据库名 -->
            <property name="trimStrings" value="true"/><!-- 是否针对string类型的字段在set的时候进行trim调用 -->
            <property name="rootClass" value="${modelRootClass}"/><!-- 父类 -->
        </javaModelGenerator>

        <!-- 生成xml文件 -->
        <!--如果targetRuntime目标是**iBATIS2**，该元素必须配置一个。-->
        <!--如果targetRuntime目标是**MyBatis3**，只有当<javaClientGenerator>需要XML时，该元素必须配置一个。 如果没有配置<javaClientGenerator>，则使用以下的规则：-->
            <!--如果指定了一个<sqlMapGenerator>，那么MBG将只生成XML的SQL映射文件和实体类。-->
            <!--如果没有指定<sqlMapGenerator>，那么MBG将只生成实体类。-->
        <sqlMapGenerator targetPackage="${sqlTarget}" targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 生成Mapper -->
        <javaClientGenerator targetPackage="${mapperTarget}" targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="false"/><!-- 是否在包名最后加上数据库名 -->
            <property name="rootInterface" value="${mapperRootInterface}"/><!-- 父类 -->
        </javaClientGenerator>

        <!-- 配置表信息 -->
        <!--tableName为%所有表-->
        <table schema="${dbName}" tableName="city" enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false" enableUpdateByExample="false"><!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample是否生成 example类   -->
            <!-- 忽略列，不生成bean 字段 -->
            <!--<ignoreColumn column="FRED"/>-->
            <!-- 指定列的java数据类型 -->
            <!--<columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR"/>-->
        </table>

    </context>
</generatorConfiguration>


        <!--http://blog.csdn.net/isea533/article/details/42102297-->